openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API for File Management System Database"
  version: "1.0.0"

servers:
  - url: "http://127.0.0.1:8000/api"
    description: Local Testing Server

components:
  schemas:

    Tag:
      type: "object"
      additionalProperties: false
      required:
        - label
      properties:
        label:
          type: "string"

    File:
      type: "object"
      additionalProperties: false
      required:
        - url
        - type
      properties:
        url:
          type: "string"
        metadata_id:
          type: "string"
        type:
          type: "string"
          enum:
            - step
            - fcstd
            - fcstd1
            - stl
            - stp

    Metadata:
      type: "object"
      additionalProperties: false
      required:
        - name
        - size
        - version
        - maintainer
        - license_id
      properties:
        name:
          type: "string"
        size:
          type: "number"
        version:
          type: "string"
        maintainer:
          type: "string"
        author:
          type: "string"
        thumbnail:
          type: "string"
        description:
          type: "string"
        rating:
          type: "number"
        license_id:
          type: "string"

    Tags:
      type: "array"
      additionalProperties: false
      items:
        type: "object"
        required:
        - label
      properties:
        label:
          type: "string"
      example: ["laptop", "monitor"]
      uniqueItems: true

  parameters:

    search_item:
      name: "search_item"
      description: "Label of the tag to get"
      in: query
      required: True
      schema:
        type: "string"
        example: "cable"


    pk:
      name: "pk"
      description: "Primary Key of the object to get"
      in: path
      required: True
      schema:
        type: "string"

    page:
      name: "page"
      description: "page number"
      in: query
      required: False
      schema:
        type: "integer"
        example: 2

    page_size:
      name: "page_size"
      description: "size of page"
      in: query
      required: False
      schema:
        type: "integer"
        example: 4

paths:
  /tag:
    get:
      operationId: "component_management_system.tags.operations.read_page"
      tags:
        - "Tags"
      summary: "Gives a paginated list of all tags"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          description: "Successfully read tags list"

    post:
      operationId: "component_management_system.tags.operations.create"
      tags:
        - Tags
      summary: "Create a Tag"
      requestBody:
        description: "Tag to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "tag"
              $ref: "#/components/schemas/Tag"
      responses:
        "201":
          description: "Successfully created a tag"

  /tag/all:
    get:
      operationId: "component_management_system.tags.operations.read_all"
      tags:
        - "Tags"
      summary: "Read the list of all tags"
      responses:
        "200":
          description: "Successfully read tags list"

  /tag/{pk}:
    get:
      operationId: "component_management_system.tags.operations.read_one"
      tags:
        - Tags
      summary: "Read one tag"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read tag"

    delete:
      tags:
        - Tags
      operationId: "component_management_system.tags.operations.delete"
      summary: "Delete a tag"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "204":
          description: "Successfully deleted tag"

  /tag/search:
    get:
      operationId: "component_management_system.tags.operations.search"
      tags:
        - Tags
        - Search
      summary: "search for the lags maching label"
      parameters:
        - $ref: "#/components/parameters/search_item"
      responses:
        "200":
          description: "Successfully searched tags"


  /file:
    get:
      operationId: "component_management_system.files.operations.read_page"
      tags:
        - "Files"
      summary: "Gives a paginated list of all files"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          description: "Successfully read files list"

    post:
      operationId: "component_management_system.files.operations.create"
      tags:
        - "Files"
      summary: "Create a File"
      requestBody:
          description: "File to create"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "file"
                $ref: "#/components/schemas/File"
      responses:
        "201":
          description: "Successfully created a file"

  /file/ALL:
    get:
      operationId: "component_management_system.files.operations.read_all"
      tags:
        - "Files"
      summary: "Read the list of all files"
      responses:
        "200":
          description: "Successfully read files list"

  /file/{pk}:
    get:
      operationId: "component_management_system.files.operations.read_one"
      tags:
        - Files
      summary: "Read one file"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read file"

    delete:
      tags:
        - Files
      operationId: "component_management_system.files.operations.delete"
      summary: "Delete a file"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "204":
          description: "Successfully deleted file"


  /metadata:
    get:
      operationId: "component_management_system.metadatas.operations.read_page"
      tags:
        - "Metadatas"
      summary: "Gives a paginated list of all metadatas"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          description: "Successfully read metadatas list"

    post:
      operationId: "component_management_system.metadatas.operations.create"
      tags:
        - "Metadatas"
      summary: "Create a File"
      requestBody:
        description: "File to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "metadata"
              $ref: "#/components/schemas/Metadata"
      responses:
        "201":
          description: "Successfully created a metadata"

  /metadata/all:
    get:
      operationId: "component_management_system.metadatas.operations.read_all"
      tags:
        - "Metadatas"
      summary: "Read the list of all metadatas"
      responses:
        "200":
          description: "Successfully read metadatas list"

  /metadata/search:
    get:
      operationId: "component_management_system.metadatas.operations.search"
      tags:
        - "Metadatas"
        - "Search"
      summary: "Read the list of all metadatas"
      parameters:
        - $ref: "#/components/parameters/search_item"
      responses:
        "200":
          description: "Successfully searched metadata"

  /metadata/{pk}:
    get:
      operationId: "component_management_system.metadatas.operations.read_one"
      tags:
        - Metadatas
      summary: "Read one metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read metadata"

    delete:
      tags:
        - Metadatas
      operationId: "component_management_system.metadatas.operations.delete"
      summary: "Delete a metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "204":
          description: "Successfully deleted metadata"

  /metadata/{pk}/tags:
    get:
      operationId: "component_management_system.metadatas.operations.read_tags"
      tags:
        - Metadatas
        - Tags
      summary: "Read tags of metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read tags"

    put:
      operationId: "component_management_system.metadatas.operations.add_tags"
      tags:
        - Metadatas
        - Tags
      summary: "Add tags to a metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      requestBody:
        description: "Tags to add"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "tags"
              $ref: "#/components/schemas/Tags"
      responses:
        "201":
          description: "Successfully added tags to metadata"

  /metadata/{pk}/files:
    get:
      operationId: "component_management_system.metadatas.operations.read_files"
      tags:
        - Metadatas
        - Files
      summary: "Read files of metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read files"


  /license/all:
    get:
      operationId: "component_management_system.licenses.operations.read_all"
      tags:
        - "Licenses"
      summary: "Read the list of all licenses"
      responses:
        "200":
          description: "Successfully read licenses list"

  /license/{pk}:
    get:
      operationId: "component_management_system.licenses.operations.read_one"
      tags:
        - "Licenses"
      summary: "Read one license"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read license"
